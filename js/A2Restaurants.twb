<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10200.17.0328.0755                               -->
<workbook source-build='10.2.1 (10200.17.0328.0755)' source-platform='mac' version='10.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='AArestaurants' inline='true' name='federated.1put8zi098dagc12ruznt07az7k8' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='AArestaurants' name='semistructpassivestore-direct.0hhvfoe0603e540zodsio0zficzx'>
            <connection class='semistructpassivestore-direct' directory='/Users/Nathan/Desktop/Test3/js' filename='AArestaurants.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[AArestaurants.json]'>
                  <map key='businesses' value='true' />
                  <map key='businesses.Value' value='true' />
                  <map key='businesses.Value.categories' value='true' />
                  <map key='businesses.Value.categories.Value' value='true' />
                  <map key='businesses.Value.coordinates' value='true' />
                  <map key='businesses.Value.location' value='true' />
                  <map key='businesses.Value.location.display_address' value='true' />
                  <map key='businesses.Value.transactions' value='true' />
                  <map key='region' value='true' />
                  <map key='region.center' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0hhvfoe0603e540zodsio0zficzx' name='AArestaurants.json' table='[AArestaurants.json]' type='table' />
        <cols>
          <map key='[Document Index (generated)]' value='[AArestaurants.json].[Document Index (generated)]' />
          <map key='[address1]' value='[AArestaurants.json].[businesses.Value.location.address1]' />
          <map key='[address2]' value='[AArestaurants.json].[businesses.Value.location.address2]' />
          <map key='[address3]' value='[AArestaurants.json].[businesses.Value.location.address3]' />
          <map key='[alias]' value='[AArestaurants.json].[businesses.Value.categories.Value.alias]' />
          <map key='[businesses Index (generated)]' value='[AArestaurants.json].[businesses.Index (generated)]' />
          <map key='[categories Index (generated)]' value='[AArestaurants.json].[businesses.Value.categories.Index (generated)]' />
          <map key='[city]' value='[AArestaurants.json].[businesses.Value.location.city]' />
          <map key='[country]' value='[AArestaurants.json].[businesses.Value.location.country]' />
          <map key='[display_address Index (generated)]' value='[AArestaurants.json].[businesses.Value.location.display_address.Index (generated)]' />
          <map key='[display_address]' value='[AArestaurants.json].[businesses.Value.location.display_address.Value]' />
          <map key='[display_phone]' value='[AArestaurants.json].[businesses.Value.display_phone]' />
          <map key='[distance]' value='[AArestaurants.json].[businesses.Value.distance]' />
          <map key='[id]' value='[AArestaurants.json].[businesses.Value.id]' />
          <map key='[image_url]' value='[AArestaurants.json].[businesses.Value.image_url]' />
          <map key='[is_closed]' value='[AArestaurants.json].[businesses.Value.is_closed]' />
          <map key='[latitude (businesses.coordinates)]' value='[AArestaurants.json].[businesses.Value.coordinates.latitude]' />
          <map key='[latitude (region.center)]' value='[AArestaurants.json].[region.center.latitude]' />
          <map key='[longitude (businesses.coordinates)]' value='[AArestaurants.json].[businesses.Value.coordinates.longitude]' />
          <map key='[longitude (region.center)]' value='[AArestaurants.json].[region.center.longitude]' />
          <map key='[name]' value='[AArestaurants.json].[businesses.Value.name]' />
          <map key='[phone]' value='[AArestaurants.json].[businesses.Value.phone]' />
          <map key='[price]' value='[AArestaurants.json].[businesses.Value.price]' />
          <map key='[rating]' value='[AArestaurants.json].[businesses.Value.rating]' />
          <map key='[review_count]' value='[AArestaurants.json].[businesses.Value.review_count]' />
          <map key='[state]' value='[AArestaurants.json].[businesses.Value.location.state]' />
          <map key='[title]' value='[AArestaurants.json].[businesses.Value.categories.Value.title]' />
          <map key='[total]' value='[AArestaurants.json].[total]' />
          <map key='[transactions Index (generated)]' value='[AArestaurants.json].[businesses.Value.transactions.Index (generated)]' />
          <map key='[transactions]' value='[AArestaurants.json].[businesses.Value.transactions.Value]' />
          <map key='[url]' value='[AArestaurants.json].[businesses.Value.url]' />
          <map key='[zip_code]' value='[AArestaurants.json].[businesses.Value.location.zip_code]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[businesses Index (generated)]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.categories.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[categories Index (generated)]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.categories.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.categories.Value.alias</remote-name>
            <remote-type>130</remote-type>
            <local-name>[alias]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.categories.Value.alias</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.categories.Value.title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[title]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.categories.Value.title</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.coordinates.latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude (businesses.coordinates)]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.coordinates.latitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.coordinates.longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude (businesses.coordinates)]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.coordinates.longitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.display_phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_phone]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.display_phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[distance]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.distance</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.image_url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[image_url]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.image_url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.is_closed</remote-name>
            <remote-type>11</remote-type>
            <local-name>[is_closed]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.is_closed</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.location.address1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address1]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.location.address1</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.location.address2</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address2]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.location.address2</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.location.address3</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address3]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.location.address3</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.location.city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.location.city</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.location.country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.location.country</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.location.display_address.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[display_address Index (generated)]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.location.display_address.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.location.display_address.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[display_address]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.location.display_address.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.location.state</remote-name>
            <remote-type>130</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.location.state</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.location.zip_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[zip_code]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.location.zip_code</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[name]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.phone</remote-name>
            <remote-type>130</remote-type>
            <local-name>[phone]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.phone</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.price</remote-name>
            <remote-type>130</remote-type>
            <local-name>[price]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.price</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.rating</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.review_count</remote-name>
            <remote-type>5</remote-type>
            <local-name>[review_count]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.review_count</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.transactions.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[transactions Index (generated)]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.transactions.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.transactions.Value</remote-name>
            <remote-type>130</remote-type>
            <local-name>[transactions]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.transactions.Value</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>businesses.Value.url</remote-name>
            <remote-type>130</remote-type>
            <local-name>[url]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>businesses.Value.url</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>region.center.latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude (region.center)]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>region.center.latitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>region.center.longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude (region.center)]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>region.center.longitude</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total]</local-name>
            <parent-name>[AArestaurants.json]</parent-name>
            <remote-alias>total</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' is-auto-gen-lod-field='true' name='[Distance per businesses]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([distance]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at businesses level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude (Businesses.Coordinates) per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([latitude (businesses.coordinates)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude (Region.Center) per center]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([latitude (region.center)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at center level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude (Businesses.Coordinates) per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([longitude (businesses.coordinates)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at coordinates level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude (Region.Center) per center]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([longitude (region.center)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at center level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per AArestaurants.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at AArestaurants.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per businesses]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([businesses Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at businesses level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per categories]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)],[businesses Index (generated)] : COUNTD([categories Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at categories level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per display address]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)],[businesses Index (generated)] : COUNTD([display_address Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at display_address level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per transactions]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)],[businesses Index (generated)] : COUNTD([transactions Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at transactions level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per businesses]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([rating]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at businesses level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Review Count per businesses]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([review_count]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at businesses level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([total]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address1' datatype='string' name='[address1]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.location.address1</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address2' datatype='string' name='[address2]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.location.address2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Address3' datatype='string' name='[address3]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.location.address3</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.categories.Value.alias</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[businesses Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>businesses.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[categories Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.categories.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.location.city</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.location.country</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='display address Index (generated)' datatype='integer' name='[display_address Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.location.display_address.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Address' datatype='string' name='[display_address]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.location.display_address.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Display Phone' datatype='string' name='[display_phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.display_phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Distance' datatype='real' name='[distance]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>businesses.Value.distance</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Id' datatype='string' name='[id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Image Url' datatype='string' name='[image_url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.image_url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Is Closed' datatype='boolean' name='[is_closed]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.is_closed</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Latitude (Businesses.Coordinates)' datatype='real' name='[latitude (businesses.coordinates)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>businesses.Value.coordinates.latitude</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Latitude (Region.Center)' datatype='real' name='[latitude (region.center)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>region.center.latitude</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Longitude (Businesses.Coordinates)' datatype='real' name='[longitude (businesses.coordinates)]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>businesses.Value.coordinates.longitude</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Longitude (Region.Center)' datatype='real' name='[longitude (region.center)]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
        <desc>
          <formatted-text>
            <run>region.center.longitude</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.name</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Phone' datatype='string' name='[phone]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.phone</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Price' datatype='string' name='[price]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.price</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rating' datatype='real' name='[rating]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>businesses.Value.rating</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Review Count' datatype='real' name='[review_count]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>businesses.Value.review_count</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='State' datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.location.state</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.categories.Value.title</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total' datatype='real' name='[total]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>total</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[transactions Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.transactions.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Transactions' datatype='string' name='[transactions]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.transactions.Value</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Url' datatype='string' name='[url]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.url</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Zip Code' datatype='string' name='[zip_code]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal'>
        <desc>
          <formatted-text>
            <run>businesses.Value.location.zip_code</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[alias]' derivation='None' name='[none:alias:nk]' pivot='key' type='nominal' />
      <column-instance column='[price]' derivation='None' name='[none:price:nk]' pivot='key' type='nominal' />
      <folder name='A Arestaurants' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <folder name='Businesses' role='dimensions'>
        <folder-item name='[businesses Index (generated)]' type='field' />
        <folder-item name='[display_phone]' type='field' />
        <folder-item name='[id]' type='field' />
        <folder-item name='[image_url]' type='field' />
        <folder-item name='[is_closed]' type='field' />
        <folder-item name='[name]' type='field' />
        <folder-item name='[phone]' type='field' />
        <folder-item name='[price]' type='field' />
        <folder-item name='[transactions Index (generated)]' type='field' />
        <folder-item name='[transactions]' type='field' />
        <folder-item name='[url]' type='field' />
      </folder>
      <folder name='Categories' role='dimensions'>
        <folder-item name='[alias]' type='field' />
        <folder-item name='[categories Index (generated)]' type='field' />
        <folder-item name='[title]' type='field' />
      </folder>
      <folder name='Location' role='dimensions'>
        <folder-item name='[address1]' type='field' />
        <folder-item name='[address2]' type='field' />
        <folder-item name='[address3]' type='field' />
        <folder-item name='[city]' type='field' />
        <folder-item name='[country]' type='field' />
        <folder-item name='[display_address Index (generated)]' type='field' />
        <folder-item name='[display_address]' type='field' />
        <folder-item name='[state]' type='field' />
        <folder-item name='[zip_code]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[distance]' type='field' />
        <folder-item name='[latitude (businesses.coordinates)]' type='field' />
        <folder-item name='[latitude (region.center)]' type='field' />
        <folder-item name='[longitude (businesses.coordinates)]' type='field' />
        <folder-item name='[longitude (region.center)]' type='field' />
        <folder-item name='[rating]' type='field' />
        <folder-item name='[review_count]' type='field' />
        <folder-item name='[total]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.394777' measure-ordering='alphabetic' measure-percentage='0.605223' rowDisplayCount='1000' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='shape' field='[none:price:nk]' type='shape'>
            <map to='asterisk'>
              <bucket>&quot;$$$$&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>%null%</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;$$&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;$&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;$$$&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:alias:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;bbq&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;chinese&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;florists&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;icecream&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;newamerican&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;sportsbars&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;wraps&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;afghani&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;cajun&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;dimsum&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;grocery&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;lounges&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;salad&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;tradamerican&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;austrian&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;catering&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;donuts&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;hookah_bars&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;mideastern&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;soulfood&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;venues&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;boating&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;coffeeroasteries&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;foodtrucks&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;irish&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;pizza&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;syrian&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;beer_and_wine&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;cigarbars&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;food_court&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;importedfood&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;noodles&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;steak&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;yoga&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;bagels&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;cheesesteaks&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;ethiopian&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;hotdog&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;mongolian&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;soup&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;vietnamese&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;cafes&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;delis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;gluten_free&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;latin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;restaurants&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;tex-mex&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;african&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;caribbean&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;diners&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;halal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;meats&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;sandwiches&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;turkish&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;buffets&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;cuban&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;gelato&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;korean&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;pubs&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;tapas&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;bakeries&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;chicken_wings&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;falafel&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;hotdogs&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;moroccan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;southern&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;waffles&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;bowling&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;comfortfood&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;french&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;italian&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;polish&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;szechuan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;breakfast_brunch&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;convenience&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;gastropubs&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;japanese&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;poolhalls&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;tacos&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;burgers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;danceclubs&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;german&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;kosher&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;ramen&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;tapasmallplates&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;cafeteria&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;desserts&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;greek&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;lebanese&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;russian&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;thai&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;beerbar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;cocktailbars&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;fooddeliveryservices&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;indpak&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;persian&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;supperclubs&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;bars&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;chickenshop&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;fishnchips&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;hungarian&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;musicvenues&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;spanish&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;wine_bars&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;armenian&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;carwash&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;divebars&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;healthmarkets&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;mediterranean&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;seafood&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;vegan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;breweries&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;cookingschools&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;gaybars&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;juicebars&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;poutineries&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;taiwanese&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;beergardens&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;coffee&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;foodstands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;internetcafe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;petadoption&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;sushi&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;asianfusion&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;catalan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;diyfood&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;himalayan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;mexican&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;seafoodmarkets&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;vegetarian&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='AArestaurants' name='federated.1put8zi098dagc12ruznt07az7k8' />
          </datasources>
          <datasource-dependencies datasource='federated.1put8zi098dagc12ruznt07az7k8'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per businesses]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([businesses Index (generated)]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at businesses level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Sum' datatype='integer' name='[businesses Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>businesses.Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[title]' derivation='None' name='[none:title:nk]' pivot='key' type='nominal' />
            <column-instance column='[zip_code]' derivation='None' name='[none:zip_code:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records per businesses]' derivation='Sum' name='[sum:Number of Records per businesses:qk]' pivot='key' type='quantitative' />
            <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.categories.Value.title</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Zip Code' datatype='string' name='[zip_code]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.location.zip_code</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1put8zi098dagc12ruznt07az7k8].[none:title:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1put8zi098dagc12ruznt07az7k8].[none:zip_code:nk]</rows>
        <cols>[federated.1put8zi098dagc12ruznt07az7k8].[sum:Number of Records per businesses:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='AArestaurants' name='federated.1put8zi098dagc12ruznt07az7k8' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1put8zi098dagc12ruznt07az7k8'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude (Businesses.Coordinates) per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([latitude (businesses.coordinates)]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude (Businesses.Coordinates) per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([longitude (businesses.coordinates)]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.categories.Value.alias</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[name]' derivation='Attribute' name='[attr:name:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' datatype='integer' name='[businesses Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>businesses.Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Latitude (Businesses.Coordinates)' datatype='real' name='[latitude (businesses.coordinates)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude (Businesses.Coordinates)' datatype='real' name='[longitude (businesses.coordinates)]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Name' datatype='string' name='[name]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.name</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude (Businesses.Coordinates) per coordinates]' derivation='None' name='[none:Latitude (Businesses.Coordinates) per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude (Businesses.Coordinates) per coordinates]' derivation='None' name='[none:Longitude (Businesses.Coordinates) per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alias]' derivation='None' name='[none:alias:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1put8zi098dagc12ruznt07az7k8].[none:Longitude (Businesses.Coordinates) per coordinates:qk]' field-type='quantitative' max='-8667654.0257518459' min='-9858979.2027448267' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1put8zi098dagc12ruznt07az7k8].[none:Latitude (Businesses.Coordinates) per coordinates:qk]' field-type='quantitative' max='5699782.7221422736' min='4819364.3596328273' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1put8zi098dagc12ruznt07az7k8].[attr:name:nk]' />
              <lod column='[federated.1put8zi098dagc12ruznt07az7k8].[none:alias:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1put8zi098dagc12ruznt07az7k8].[none:Latitude (Businesses.Coordinates) per coordinates:qk]</rows>
        <cols>[federated.1put8zi098dagc12ruznt07az7k8].[none:Longitude (Businesses.Coordinates) per coordinates:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='AArestaurants' name='federated.1put8zi098dagc12ruznt07az7k8' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1put8zi098dagc12ruznt07az7k8'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Latitude (Businesses.Coordinates) per coordinates]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([latitude (businesses.coordinates)]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' datatype='real' is-auto-gen-lod-field='true' name='[Longitude (Businesses.Coordinates) per coordinates]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([longitude (businesses.coordinates)]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at coordinates level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' is-auto-gen-lod-field='true' name='[Rating per businesses]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[businesses Index (generated)] : MAX([rating]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at businesses level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Alias' datatype='string' name='[alias]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.categories.Value.alias</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Rating per businesses]' derivation='Attribute' name='[attr:Rating per businesses:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' datatype='integer' name='[businesses Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>businesses.Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Latitude (Businesses.Coordinates)' datatype='real' name='[latitude (businesses.coordinates)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.coordinates.latitude</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Longitude (Businesses.Coordinates)' datatype='real' name='[longitude (businesses.coordinates)]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.coordinates.longitude</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Latitude (Businesses.Coordinates) per coordinates]' derivation='None' name='[none:Latitude (Businesses.Coordinates) per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude (Businesses.Coordinates) per coordinates]' derivation='None' name='[none:Longitude (Businesses.Coordinates) per coordinates:qk]' pivot='key' type='quantitative' />
            <column-instance column='[alias]' derivation='None' name='[none:alias:nk]' pivot='key' type='nominal' />
            <column-instance column='[price]' derivation='None' name='[none:price:nk]' pivot='key' type='nominal' />
            <column caption='Price' datatype='string' name='[price]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.price</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Rating' datatype='real' name='[rating]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>businesses.Value.rating</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1put8zi098dagc12ruznt07az7k8].[none:alias:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:alias:nk]' member='&quot;bbq&quot;' />
              <groupfilter function='member' level='[none:alias:nk]' member='&quot;burgers&quot;' />
              <groupfilter function='member' level='[none:alias:nk]' member='&quot;chinese&quot;' />
              <groupfilter function='member' level='[none:alias:nk]' member='&quot;coffee&quot;' />
              <groupfilter function='member' level='[none:alias:nk]' member='&quot;italian&quot;' />
              <groupfilter function='member' level='[none:alias:nk]' member='&quot;japanese&quot;' />
              <groupfilter function='member' level='[none:alias:nk]' member='&quot;korean&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1put8zi098dagc12ruznt07az7k8].[none:alias:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1put8zi098dagc12ruznt07az7k8].[none:Longitude (Businesses.Coordinates) per coordinates:qk]' field-type='quantitative' max='-9231333.1736983918' min='-9344492.1595723629' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1put8zi098dagc12ruznt07az7k8].[none:Latitude (Businesses.Coordinates) per coordinates:qk]' field-type='quantitative' max='5239621.6936900737' min='5141911.0335326865' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1put8zi098dagc12ruznt07az7k8].[none:alias:nk]' />
              <tooltip column='[federated.1put8zi098dagc12ruznt07az7k8].[attr:Rating per businesses:qk]' />
              <size column='[federated.1put8zi098dagc12ruznt07az7k8].[none:price:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1put8zi098dagc12ruznt07az7k8].[none:Latitude (Businesses.Coordinates) per coordinates:qk]</rows>
        <cols>[federated.1put8zi098dagc12ruznt07az7k8].[none:Longitude (Businesses.Coordinates) per coordinates:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1put8zi098dagc12ruznt07az7k8].[none:title:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1put8zi098dagc12ruznt07az7k8].[none:title:nk]</field>
            <field>[federated.1put8zi098dagc12ruznt07az7k8].[none:zip_code:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1put8zi098dagc12ruznt07az7k8].[none:alias:nk]</field>
            <field>[federated.1put8zi098dagc12ruznt07az7k8].[none:name:nk]</field>
            <field>[federated.1put8zi098dagc12ruznt07az7k8].[none:title:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1put8zi098dagc12ruznt07az7k8].[none:alias:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.1put8zi098dagc12ruznt07az7k8].[none:price:nk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1put8zi098dagc12ruznt07az7k8].[none:Rating per businesses:qk]</field>
            <field>[federated.1put8zi098dagc12ruznt07az7k8].[none:alias:nk]</field>
            <field>[federated.1put8zi098dagc12ruznt07az7k8].[none:price:nk]</field>
            <field>[federated.1put8zi098dagc12ruznt07az7k8].[sum:Review Count per businesses:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAACFUlEQVR4nO3TMQEAIAzAMMC/5yFjRxMFfXpnZg5Eve0A2GQA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQD
      kGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBp
      BiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA
      0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDN
      AKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxA
      mgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKR9Y+0F
      fBUOM1sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
